question,answer
1. What is the Service API in Kubernetes primarily designed for? — A) Managing container images — B) Exposing groups of Pods over a network — C) Configuring network security policies — D) Orchestrating load balancing mechanisms,B) Exposing groups of Pods over a network
2. How does the Service abstraction in Kubernetes help in decoupling applications? — A) By defining logical sets of endpoints — B) By managing container replicas — C) By enforcing security policies — D) By providing direct access to Pods,A) By defining logical sets of endpoints
"3. In Kubernetes, what determines the set of Pods targeted by a Service? — A) Replica count — B) Selector definition — C) Pod IP addresses — D) Container image name",B) Selector definition
4. What is the purpose of an Ingress in Kubernetes? — A) To manage containerized databases — B) To consolidate routing rules for web traffic — C) To monitor resource usage — D) To control access to the Kubernetes API,B) To consolidate routing rules for web traffic
"5. How does an Ingress differ from a Service in Kubernetes? — A) Ingress provides access to internal services while Service handles external traffic. — B) Ingress consolidates routing rules, while Service manages endpoint exposure. — C) Ingress is used for stateful workloads, while Service is for stateless workloads. — D) Ingress manages container lifecycle, while Service manages networking policies.","B) Ingress consolidates routing rules, while Service manages endpoint exposure."
6. What additional capabilities does the Gateway API for Kubernetes provide beyond Ingress and Service? — A) Enhanced security features — B) Load balancing mechanisms — C) Custom routing configurations — D) Network service access configuration,D) Network service access configuration
7. How are Ingress and Gateway related in Kubernetes? — A) Ingress is a subset of Gateway functionality. — B) Gateway is an alternative to Ingress. — C) Ingress and Gateway are complementary for managing network access. — D) Ingress is deprecated in favor of Gateway.,C) Ingress and Gateway are complementary for managing network access.
8. Which Kubernetes resource acts as the entry point for routing rules consolidation? — A) Ingress — B) Service — C) Gateway — D) Pod,A) Ingress
9. What type of workload would typically benefit from using Ingress in Kubernetes? — A) Stateful applications — B) Stateless microservices — C) Batch processing jobs — D) Database management systems,B) Stateless microservices
"10. In Kubernetes, how are routing rules consolidated using Ingress? — A) By exposing multiple components behind a single listener — B) By defining logical sets of endpoints — C) By enforcing network security policies — D) By managing containerized databases",A) By exposing multiple components behind a single listener
11. What role does the Gateway API play in Kubernetes networking? — A) It replaces Ingress for routing configurations. — B) It provides additional capabilities beyond Ingress and Service. — C) It handles container image management. — D) It controls access to the Kubernetes API server.,B) It provides additional capabilities beyond Ingress and Service.
12. How does the Service API in Kubernetes contribute to application scalability? — A) By managing container lifecycles — B) By dynamically adjusting replica counts — C) By defining logical sets of endpoints — D) By enforcing network security policies,C) By defining logical sets of endpoints
13. Which Kubernetes resource is responsible for managing access to network services within the cluster? — A) Gateway — B) Ingress — C) Service — D) Pod,C) Service
14. What is the primary advantage of using a Service in Kubernetes? — A) Simplifying container image management — B) Ensuring high availability of Pods — C) Exposing groups of Pods over a network — D) Enforcing security policies within Pods,C) Exposing groups of Pods over a network
"15. How do frontend clients interact with backend services in Kubernetes, facilitated by Services? — A) Clients directly communicate with individual Pods. — B) Clients communicate with a logical set of endpoints defined by Services. — C) Clients access Pods through a centralized routing system. — D) Clients must manually track the set of backend Pods.",B) Clients communicate with a logical set of endpoints defined by Services.
16. Which Kubernetes resource helps consolidate routing rules into a single resource for managing web traffic? — A) Gateway — B) Ingress — C) Service — D) Pod,B) Ingress
"17. In Kubernetes, what determines which Pods are targeted by a Service? — A) Pod IP addresses — B) Replica count — C) Selector definition — D) Container image name",C) Selector definition
18. What is the primary function of an Ingress in Kubernetes? — A) Managing container replicas — B) Defining routing rules for web traffic — C) Exposing groups of Pods over a network — D) Enforcing security policies within Pods,B) Defining routing rules for web traffic
19. How does the Gateway API in Kubernetes extend networking capabilities beyond Ingress and Service? — A) By consolidating routing rules — B) By providing additional security features — C) By dynamically adjusting Pod replicas — D) By configuring access to network services,D) By configuring access to network services
20. What is the main benefit of using Ingress for managing web traffic in Kubernetes? — A) Simplifying container image management — B) Enabling centralized routing rule configuration — C) Ensuring high availability of Pods — D) Enforcing security policies within Pods,B) Enabling centralized routing rule configuration
1. How can you utilize Kubernetes APIs for service discovery in your application? — A) By querying the API server for matching Pods — B) By querying the API server for matching EndpointSlices — C) By directly accessing backend Pods — D) By configuring network load balancers manually,B) By querying the API server for matching EndpointSlices
2. What does Kubernetes update for a Service whenever the set of Pods changes? — A) Service definitions — B) Replica counts — C) EndpointSlices — D) Pod IP addresses,C) EndpointSlices
"3. For non-native applications in Kubernetes, what options are available to place a network port or load balancer between the application and backend Pods? — A) Direct Pod access — B) Service discovery mechanisms — C) Querying the API server — D) Configuring Ingress resources",D) Configuring Ingress resources
4. How can Kubernetes assist non-native applications in connecting to backend Pods? — A) By exposing Pod IP addresses directly — B) By providing EndpointSlices for each Service — C) By offering manual configuration of network ports — D) By offering service discovery mechanisms,D) By offering service discovery mechanisms
5. What is the purpose of EndpointSlices in Kubernetes service discovery? — A) To define routing rules — B) To manage container replicas — C) To track changes in the set of Pods for a Service — D) To manage network security policies,C) To track changes in the set of Pods for a Service
6. How do non-native applications typically interact with backend Pods in Kubernetes? — A) Through direct Pod access — B) Through querying the API server for Pods — C) Through service discovery mechanisms — D) Through manual configuration of load balancers,C) Through service discovery mechanisms
7. What enables Kubernetes workloads to find the target they want to connect to? — A) Direct querying of Pod IP addresses — B) Manual configuration of network ports — C) Service discovery mechanisms — D) Static routing rules,C) Service discovery mechanisms
"8. In Kubernetes, what updates when the set of Pods in a Service changes? — A) Pod IP addresses — B) Service definitions — C) Replica counts — D) EndpointSlices",D) EndpointSlices
9. How does Kubernetes assist non-native applications in connecting to backend Pods? — A) By exposing Pod IP addresses directly — B) By providing direct access to backend Pods — C) By offering service discovery mechanisms — D) By configuring network load balancers automatically,C) By offering service discovery mechanisms
10. What options does Kubernetes provide for non-native applications to establish connections with backend Pods? — A) Direct API server access — B) Manual load balancer configuration — C) Service discovery mechanisms — D) Pod IP address listing,C) Service discovery mechanisms
1. What type of object is a Service in Kubernetes? — A) Configuration — B) Pod — C) Service — D) ConfigMap,C) Service
2. How can you interact with Service definitions in Kubernetes? — A) Directly accessing the API server — B) Using kubectl or similar tools to make API calls — C) Modifying Pod configurations — D) Editing YAML files manually,B) Using kubectl or similar tools to make API calls
3. What tool is commonly used to manage Service definitions in Kubernetes? — A) Docker — B) Minikube — C) kubectl — D) Helm,C) kubectl
4. What type of port can a Service in Kubernetes map to a targetPort? — A) HTTP — B) UDP — C) TCP — D) SSH,C) TCP
"5. When creating a Service, what does Kubernetes assign to it? — A) Pod replicas — B) Replica counts — C) A cluster IP address — D) Pod IP addresses",C) A cluster IP address
6. How does Kubernetes handle updates to the set of EndpointSlices for a Service? — A) Manually by administrators — B) Automatically by the controller for the Service — C) Through direct API calls — D) By restarting Pods,B) Automatically by the controller for the Service
7. What is the default type of IP address assigned to a Service in Kubernetes? — A) External IP — B) Internal IP — C) Cluster IP — D) Virtual IP,C) Cluster IP
8. Which mechanism does Kubernetes use for virtual IP address management in Services? — A) Virtual IPs and Service Proxies — B) Kubernetes Load Balancer — C) NodePort Service — D) Ingress Controller,A) Virtual IPs and Service Proxies
9. What naming convention must the name of a Service object adhere to? — A) RFC 1918 — B) RFC 3339 — C) RFC 1035 — D) RFC 5321,C) RFC 1035
10. What is the default value of the targetPort field in a Service definition? — A) The same as the port field — B) Randomly assigned — C) 8080 — D) 80,A) The same as the port field
11. How does Kubernetes continuously update the set of EndpointSlices for a Service? — A) Through manual intervention — B) By restarting Pods — C) Automatically by the controller for the Service — D) By reloading configuration files,C) Automatically by the controller for the Service
12. What does a Service object in Kubernetes typically target? — A) Pod replicas — B) Node IP addresses — C) Pod IP addresses — D) Cluster IP addresses,C) Pod IP addresses
13. What is the purpose of a Service controller in Kubernetes? — A) To manage Pod lifecycles — B) To handle API requests — C) To continuously update EndpointSlices for a Service — D) To manage networking policies,C) To continuously update EndpointSlices for a Service
14. Which type of Kubernetes resource must have a valid RFC 1035 label name? — A) Deployment — B) StatefulSet — C) Service — D) PersistentVolume,C) Service
15. How does Kubernetes handle incoming traffic for a Service? — A) By directly routing traffic to individual Pods — B) By using a load balancer — C) By applying network policies — D) By inspecting Pod configurations,B) By using a load balancer
16. What does a Service map incoming ports to on its target Pods by default? — A) 443 — B) 80 — C) 9376 — D) Randomly assigned,B) 80
17. What does Kubernetes provide to abstract away the complexity of managing network traffic to Pods? — A) Virtual IP addresses — B) Ingress resources — C) Services — D) Network policies,C) Services
18. How does Kubernetes enable virtual IP address management for Services? — A) Through manual configuration — B) By using DNS resolution — C) Through the Virtual IPs and Service Proxies mechanism — D) By assigning static IP addresses,C) Through the Virtual IPs and Service Proxies mechanism
19. What is the primary function of a Service object in Kubernetes? — A) Managing container replicas — B) Exposing Pods over a network — C) Defining routing rules — D) Configuring network security policies,B) Exposing Pods over a network
1. What feature of port definitions in Pods allows referencing them in the targetPort attribute of a Service in Kubernetes? — A) IP addressing — B) Naming conventions — C) Network protocols — D) Port mapping,B) Naming conventions
2. How can you ensure flexibility in deploying and evolving Services in Kubernetes? — A) By using static IP addresses — B) By dynamically changing Pod labels — C) By referencing port names in Service configurations — D) By manually configuring network protocols,C) By referencing port names in Service configurations
3. What does Kubernetes support for port definitions in Services to accommodate multiple protocols? — A) Dynamic port allocation — B) Single port definition — C) Multiple port definitions — D) Port forwarding,C) Multiple port definitions
4. How does Kubernetes handle Services with a mixture of Pods using different network protocols? — A) By restricting protocol usage — B) By using separate Services for each protocol — C) By allowing multiple port definitions with different protocols — D) By enforcing uniform protocol configurations,C) By allowing multiple port definitions with different protocols
5. What is the default protocol for Services in Kubernetes? — A) UDP — B) HTTP — C) TCP — D) SSH,C) TCP
6. How does Kubernetes facilitate flexibility in port numbering for Services? — A) By enforcing strict port ranges — B) By allowing dynamic port allocation — C) By using port naming conventions — D) By supporting multiple port definitions,D) By supporting multiple port definitions
7. What benefit does referencing port names in Service configurations provide in Kubernetes? — A) Enhanced security — B) Improved scalability — C) Increased flexibility in port mapping — D) Simplified network policies,C) Increased flexibility in port mapping
8. What feature of Services in Kubernetes allows for exposing multiple ports? — A) Port forwarding — B) Port aliasing — C) Multiple port definitions — D) Dynamic port allocation,C) Multiple port definitions
9. How can Kubernetes ensure compatibility between Services and backend Pods when port numbers change? — A) By automatically updating Pod configurations — B) By using dynamic port allocation — C) By referencing port names in Service configurations — D) By enforcing strict port numbering rules,C) By referencing port names in Service configurations
10. What flexibility does Kubernetes offer for changing port numbers in backend Pods without affecting clients? — A) Manual configuration of client-side ports — B) Use of port aliasing — C) Referencing port names in Service configurations — D) Dynamic port allocation for Services,C) Referencing port names in Service configurations
1. When might you use a Service without selectors in Kubernetes? — A) When deploying external databases — B) When scaling Pods dynamically — C) When enforcing network policies — D) When managing container replicas,A) When deploying external databases
2. How can a Service without selectors in Kubernetes abstract access to backend resources? — A) By using selector-less EndpointSlices — B) By directly referencing Pod IP addresses — C) By configuring network load balancers — D) By utilizing Ingress resources,A) By using selector-less EndpointSlices
3. What does a Service without selectors allow in Kubernetes? — A) Access to Kubernetes API server — B) Abstraction of different types of backend resources — C) Dynamic scaling of Pods — D) Enforcement of security policies,B) Abstraction of different types of backend resources
4. In which scenario might you use a Service without selectors in Kubernetes? — A) When deploying stateful applications — B) When running batch processing jobs — C) When migrating workloads to Kubernetes — D) When managing container images,C) When migrating workloads to Kubernetes
5. How does a Service without selectors in Kubernetes enable workload migration? — A) By automating Pod deployment — B) By facilitating access to external resources — C) By abstracting access to backend services — D) By enforcing network policies,C) By abstracting access to backend services
6. What Kubernetes resource is typically used in conjunction with a Service without selectors? — A) Ingress — B) EndpointSlice — C) ConfigMap — D) PersistentVolume,B) EndpointSlice
7. What label should be set for a Service without selectors in Kubernetes? — A) kubernetes.io/selector-less — B) kubernetes.io/service-name — C) kubernetes.io/backend — D) kubernetes.io/pod-label,B) kubernetes.io/service-name
8. How does Kubernetes handle backend selection in a Service without selectors? — A) Automatically selects all available Pods — B) Manually assigns backend IP addresses — C) Uses EndpointSlices to define specific endpoints — D) Relies on Ingress resources for backend routing,C) Uses EndpointSlices to define specific endpoints
9. What is the purpose of the addressType field in an EndpointSlice for a Service without selectors? — A) To specify the backend database type — B) To indicate the type of IP addresses used by endpoints — C) To define network policies for accessing endpoints — D) To configure load balancer settings,B) To indicate the type of IP addresses used by endpoints
10. How does Kubernetes support pointing a Service to resources outside the cluster? — A) By using Ingress resources — B) By configuring ExternalName Services — C) By defining Pod selectors — D) By enforcing network policies,B) By configuring ExternalName Services
11. What protocol is specified in the appProtocol field for a port in an EndpointSlice? — A) HTTP — B) TCP — C) UDP — D) HTTPS,A) HTTP
12. What is the primary benefit of using a Service without selectors in Kubernetes? — A) Enhanced security — B) Flexibility in backend resource abstraction — C) Simplified network configuration — D) Improved scalability,B) Flexibility in backend resource abstraction
13. How can Kubernetes support routing a Service to a different Namespace or cluster? — A) By configuring network load balancers — B) By using Service without selectors — C) By defining Pod selectors — D) By enforcing network policies,B) By using Service without selectors
14. What does the endpoints field in an EndpointSlice specify? — A) Backend IP addresses — B) Pod names — C) Service selectors — D) Network policies,A) Backend IP addresses
15. What role does EndpointSlice play in Kubernetes Services without selectors? — A) Defining routing rules — B) Specifying backend IP addresses — C) Enforcing security policies — D) Managing Pod lifecycles,B) Specifying backend IP addresses
16. What is the advantage of using EndpointSlices with a Service without selectors? — A) Improved scalability — B) Enhanced security — C) Flexibility in backend configuration — D) Simplified networking,C) Flexibility in backend configuration
17. How does Kubernetes handle backend resources when using a Service without selectors? — A) It selects all available Pods automatically — B) It manually assigns backend IP addresses — C) It uses EndpointSlices to define specific endpoints — D) It relies on Ingress resources for backend routing,C) It uses EndpointSlices to define specific endpoints
18. What type of access does a Service without selectors enable in Kubernetes? — A) Direct Pod access — B) External cluster access — C) In-cluster access — D) Restricted access,B) External cluster access
19. How does a Service without selectors provide flexibility in managing backend resources? — A) By automatically scaling Pods — B) By abstracting access to external resources — C) By enforcing strict Pod selection rules — D) By using predefined network policies,B) By abstracting access to external resources
20. What Kubernetes API version is used for defining EndpointSlices for a Service without selectors? — A) v1 — B) v1alpha1 — C) v1beta1 — D) discovery.k8s.io/v1,D) discovery.k8s.io/v1
2. How do you link an EndpointSlice to a Service in Kubernetes? — A) By setting the kubernetes.io/service-name label — B) By using a specific API version — C) By defining matching selectors — D) By configuring network policies,A) By setting the kubernetes.io/service-name label
3. What range of IP addresses is not allowed for endpoints in an EndpointSlice in Kubernetes? — A) 10.0.0.0/8 — B) 192.168.0.0/16 — C) 127.0.0.0/8 — D) 172.16.0.0/12,C) 127.0.0.0/8
4. Why are cluster IPs of other Kubernetes Services not allowed as endpoint IP addresses in Kubernetes? — A) Due to network security policies — B) Because of kube-proxy limitations — C) To prevent IP conflicts — D) To enforce isolation between Services,B) Because of kube-proxy limitations
5. What label should be set to specify the controller managing an EndpointSlice in Kubernetes? — A) endpointslice.kubernetes.io/managed-by — B) kubernetes.io/controller-name — C) kubernetes.io/endpoint-controller — D) controller.kubernetes.io/managed-by,A) endpointslice.kubernetes.io/managed-by
6. How should you name an EndpointSlice managed by your own controller code? — A) Use “controller” as the value for endpointslice.kubernetes.io/managed-by. — B) Use a value similar to “my-domain.example/name-of-controller”. — C) Use the name of the Kubernetes Service. — D) Use a random string as the name.,B) Use a value similar to “my-domain.example/name-of-controller”.
8. What value should you avoid using for the managed-by label of an EndpointSlice in Kubernetes? — A) “controller” — B) “my-domain.example/name-of-controller” — C) “staff” — D) “cluster-admins”,A) “controller”
9. Why should you avoid using “controller” as the managed-by label value for an EndpointSlice? — A) It conflicts with Kubernetes’ own control plane. — B) It is reserved for Kubernetes system controllers. — C) It can cause naming collisions. — D) It does not provide meaningful information about the controller.,A) It conflicts with Kubernetes’ own control plane.
10. What does setting the managed-by label for an EndpointSlice in Kubernetes help with? — A) It enforces access control policies. — B) It identifies the controller managing the EndpointSlice. — C) It defines network routing rules. — D) It specifies Pod selectors.,B) It identifies the controller managing the EndpointSlice.
11. What is the purpose of the kubernetes.io/service-name label on an EndpointSlice in Kubernetes? — A) To specify the Kubernetes Service managing the EndpointSlice — B) To define network policies for the EndpointSlice — C) To indicate the namespace of the EndpointSlice — D) To identify the controller managing the EndpointSlice,A) To specify the Kubernetes Service managing the EndpointSlice
12. What restriction applies to endpoint IP addresses in an EndpointSlice in Kubernetes? — A) They cannot be within the cluster IP range. — B) They must belong to the same subnet as the Pod IPs. — C) They must not be loopback or link-local addresses. — D) They must be reserved IP addresses.,C) They must not be loopback or link-local addresses.
13. How does Kubernetes handle conflicts between the names of EndpointSlices in the same namespace? — A) It merges the EndpointSlices. — B) It raises an error during creation. — C) It automatically renames one of the EndpointSlices. — D) It assigns a random suffix to one of the names.,B) It raises an error during creation.
14. What is the significance of having unique names for EndpointSlices in Kubernetes?,
- A) It simplifies management and troubleshooting. — B) It ensures efficient resource utilization. — C) It facilitates load balancing. — D) It prevents conflicts and errors.,D) It prevents conflicts and errors.
15. What role does the managed-by label play in Kubernetes EndpointSlices? — A) It specifies the controller managing the EndpointSlice. — B) It defines access control policies for the EndpointSlice. — C) It determines the Pod selector for the EndpointSlice. — D) It assigns network policies to the EndpointSlice.,A) It specifies the controller managing the EndpointSlice.
16. How does Kubernetes ensure the uniqueness of names for EndpointSlices in the same namespace? — A) By appending timestamps to the names — B) By using a centralized naming registry — C) By enforcing naming conventions — D) By raising errors during creation,D) By raising errors during creation
17. What does the managed-by label value “staff” imply in Kubernetes EndpointSlices? — A) Manual management by staff members — B) Automation by a controller named “staff” — C) Deployment by non-administrative users — D) Automatic management by Kubernetes’ control plane,A) Manual management by staff members
18. What IP address ranges are prohibited for endpoint IPs in Kubernetes EndpointSlices? — A) 192.0.0.0/8 — B) 169.254.0.0/16 — C) 10.0.0.0/8 — D) 172.16.0.0/12,B) 169.254.0.0/16
19. What information does the managed-by label provide about an EndpointSlice in Kubernetes? — A) The namespace of the EndpointSlice — B) The creation timestamp of the EndpointSlice — C) The controller managing the EndpointSlice — D) The Pod selector for the EndpointSlice,C) The controller managing the EndpointSlice
20. How does the managed-by label value help in identifying the source of management for an EndpointSlice in Kubernetes? — A) By indicating the organization’s domain name — B) By specifying the controller’s name and namespace — C) By providing details about the managing tool or controller — D) By representing the controller’s role in the Kubernetes cluster,C) By providing details about the managing tool or controller
2. What are the endpoints defined in the EndpointSlice manifest used for in Kubernetes? — A) To configure network policies — B) To define Pod selectors — C) To route traffic to backend resources — D) To manage Pod lifecycles,C) To route traffic to backend resources
3. Why does the Kubernetes API server restrict proxying to endpoints not mapped to Pods? — A) To enforce network security policies — B) To prevent unauthorized access to endpoints — C) To improve API server performance — D) To simplify networking configurations,B) To prevent unauthorized access to endpoints
4. What action would fail if attempting to proxy to a Service without a selector in Kubernetes? — A) kubectl exec — B) kubectl apply — C) kubectl describe — D) kubectl proxy,D) kubectl proxy
5. What is an ExternalName Service in Kubernetes? — A) A Service with selectors — B) A Service without selectors — C) A Service using DNS names instead of IP addresses — D) A Service with restricted access,C) A Service using DNS names instead of IP addresses
6. What prevents the Kubernetes API server from being used as a proxy to unauthorized endpoints? — A) Network policies — B) EndpointSlice configurations — C) Authentication and authorization mechanisms — D) Pod security policies,C) Authentication and authorization mechanisms
8. What is the purpose of an EndpointSlice manifest in Kubernetes? — A) To define network policies — B) To manage Pod lifecycles — C) To configure routing rules — D) To specify backend resources for a Service,D) To specify backend resources for a Service
9. What type of Service is used when DNS names are preferred over IP addresses in Kubernetes? — A) ExternalName Service — B) ClusterIP Service — C) NodePort Service — D) LoadBalancer Service,A) ExternalName Service
10. What mechanism does Kubernetes employ to prevent unauthorized access to endpoints through the API server? — A) Proxy authentication — B) Endpoint authorization — C) RBAC (Role-Based Access Control) — D) Network segmentation,C) RBAC (Role-Based Access Control)
